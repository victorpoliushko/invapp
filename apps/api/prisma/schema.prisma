generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EDITOR
  USER
}

model User {
  id                 String  @id @default(uuid())
  username           String  @unique
  password           String
  phoneNumber        String?
  email              String
  hashedRefreshToken String?
  role               Role    @default(USER)

  settings         UserSettings?
  portfolios       Portfolio[]
  investStrategies InvestStrategy[]

  // TODO
  // ApiKey ApiKey[]
}

model UserSettings {
  id              String   @id @default(uuid())
  receiveSMS      Boolean?
  publicPortfolio Boolean?

  user   User?  @relation(fields: [userId], references: [id])
  userId String @unique
}

// TODO: fix stock type that comes from CSV
enum SymbolType {
  BOND
  CASH
  COMMODITY
  CRYPTOCURRENCY
  ETF
  MUTUALFUND
  PRECIOUS_METAL
  PRIVATE_EQUITY
  Stock
}

enum DataSource {
  ALPHA_VANTAGE
}

model Symbol {
  id         String      @id @default(uuid())
  symbol     String      @unique
  name       String?
  type       SymbolType?
  exchange   String?
  dataSource DataSource?
  updatedAt  DateTime?   @updatedAt

  portfolios PortfolioSymbol[]
}

model Portfolio {
  id   String @id @default(uuid())
  name String

  user   User?  @relation(fields: [userId], references: [id])
  userId String

  symbols PortfolioSymbol[]
}

model PortfolioSymbol {
  portfolioId String
  symbolId    String

  quantity    Float
  price       Float?
  avgBuyPrice Float?

  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  symbols   Symbol    @relation(fields: [symbolId], references: [id])

  @@id([portfolioId, symbolId])
}

model InvestStrategy {
  id      String   @id @default(uuid())
  title   String
  tickers String[]

  user   User?  @relation(fields: [userId], references: [id])
  userId String
}

enum MixedAssetType {
  REAL_ESTATE
  APPS
}

model MixedAssets {
  id       String         @id @default(uuid())
  title    String
  type     MixedAssetType
  quantity Int
  price    Float
}

// TODO
// model ApiKey {
//   createdAt DateTime @default(now())
//   hashedKey String   @unique
//   id        String   @id @default(uuid())
//   updatedAt DateTime @updatedAt
//   userId    String
//   user      User     @relation(fields: [userId], onDelete: Cascade, references: [id])

//   @@index([userId])
// }
